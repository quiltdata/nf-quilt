/*
 * Copyright 2021-2022, Seqera Labs
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS
 * of any kind, either express or implied.
 * See the License for the specific language governing permissions and limitations.
 */

plugins {
    // Apply the conventions and plugins required by the build
    id 'io.nextflow.groovy-library-conventions'
    id 'idea'
    id 'jacoco'
}

group = 'io.nextflow'

// DO NOT SET THE VERSION HERE
// PLUGIN VERSION IS DEFINED IN THE `META-INF/MANIFEST.MF` FILE

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(javaLangVersion)
    }
}

compileJava {
    options.release = jdkVersion.toInteger()
}

tasks.withType(GroovyCompile).configureEach {
    sourceCompatibility = jdkVersion
    targetCompatibility = jdkVersion
}

idea {
    module.inheritOutputDirs = true
}

repositories {
    mavenCentral()
    maven { url = 'https://jitpack.io' }
    maven { url = 'https://s3-eu-west-1.amazonaws.com/maven.seqera.io/releases' }
    maven { url = 'https://s3-eu-west-1.amazonaws.com/maven.seqera.io/snapshots' }
}

configurations {
    // Exclude transitive dependencies
    runtimeClasspath.exclude(group: 'org.slf4j', module: 'slf4j-api')
}

sourceSets {
    main {
        java.srcDirs = []               // Disable Java sources
        groovy.srcDirs = ['src/main']   // Use Groovy sources
        resources.srcDirs = ['src/resources'] // Use resources
    }
    test {
        java.srcDirs = []               // Disable Java sources for tests
        groovy.srcDirs = ['src/test']   // Use Groovy test sources
        resources.srcDirs = ['src/testResources'] // Use test resources
    }
}

dependencies {
    def nextflowVersion = rootProject.file('VERSION').text.trim()

    // Quiltcore
    implementation 'com.quiltdata:quiltcore:0.1.7'

    // Compile-only dependencies
    compileOnly "io.nextflow:nextflow:$nextflowVersion"
    compileOnly 'org.slf4j:slf4j-api:2.1.0-alpha1'
    compileOnly 'org.pf4j:pf4j:3.13.0'

    // Runtime-only dependencies
    runtimeOnly 'org.junit.platform:junit-platform-launcher:1.12.2'
    implementation 'commons-io:commons-io:2.18.0'

    // Test dependencies
    testImplementation "io.nextflow:nextflow:$nextflowVersion"
    testImplementation "org.${groovySource}.groovy:groovy:$groovyVersion"
    testImplementation "org.${groovySource}.groovy:groovy-nio:$groovyVersion"
    testImplementation("org.${groovySource}.groovy:groovy-test:$groovyVersion") {
        exclude group: "org.${groovySource}.groovy"
    }
    testImplementation('cglib:cglib-nodep:3.3.0')
    testImplementation('org.objenesis:objenesis:3.4')

    // Spock framework
    testImplementation("org.spockframework:spock-core:2.3-$groovyV") {
        exclude group: "org.${groovySource}.groovy"
        exclude group: 'net.bytebuddy'
    }
    testImplementation("org.spockframework:spock-junit4:2.3-$groovyV") {
        exclude group: "org.${groovySource}.groovy"
        exclude group: 'net.bytebuddy'
    }

    // Miscellaneous test dependencies
    testImplementation('com.google.jimfs:jimfs:1.3.0')
    testImplementation(testFixtures("io.nextflow:nextflow:$nextflowVersion"))
    testImplementation(testFixtures("io.nextflow:nf-commons:$nextflowVersion"))

    // Module replacement
    modules {
        module('commons-logging:commons-logging') {
            replacedBy('org.slf4j:jcl-over-slf4j')
        }
    }
}

// Use JUnit 5 platform for testing
test {
    useJUnitPlatform()
}

jacocoTestReport {
    dependsOn test // The report depends on the completion of tests
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport // Ensure the test report is generated first
    violationRules {
        rule {
            limit {
                minimum = 0.7 // Ensure at least 70% coverage
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['org.gradle.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3 // Coverage limit for lines
            }
        }
    }
}
